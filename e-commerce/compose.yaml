# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.8'

services:
  server:
    build:
      context: .
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
    networks:
      - mongo_network
    environment:
      - SPRING_APPLICATION_NAME=e-commerce
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/e-commerce # Refer to the service name 'mongodb'
      - SPRING_DATA_MONGODB_USERNAME=Abynah
      - SPRING_DATA_MONGODB_PASSWORD=Abynah_123
      - SPRING_DATA_MONGODB_DATABASE=e-commerce
      - SPRING_PROFILES_ACTIVE=dev
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
      - MANAGEMENT_ENDPOINT_MAPPINGS_ENABLED=true
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - SPRING_SECURITY_USER_NAME=admin
      - SPRING_SECURITY_USER_PASSWORD=password
      - MANAGEMENT_ENDPOINT_HEALTH_ROLES=ADMIN
      - LOGGING_FILE_PATH=file.log
      - LOGGING_LEVEL_ROOT=info
      - LOGGING_PATTERN_FILE=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - mongo_network

volumes:
   mongo_data:

networks:
  mongo_network:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

